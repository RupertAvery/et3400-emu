/*
 *    NOTICE - This code contains work derived from the MAME project (http://mamedev.org/source/src/emu/cpu/m6800/index.html)
 */

namespace Core6800
{
    public partial class Cpu6800
    {
        private int IMMBYTE()
        {
            var result = ReadMem(State.PC);
            State.PC++;
            return result;
        }

        private int DIRBYTE()
        {
            DIRECT();
            return ReadMem(State.EAD);
        }

        private void IMM8()
        {
            State.EAD = State.PC++;
        }

        private void IMM16()
        {
            State.EAD = State.PC;
            State.PC += 2;
        }

        private int EXTBYTE()
        {
            EXTENDED();
            return ReadMem(State.EAD);
        }

        private int EXTWORD()
        {
            EXTENDED();
            return RM16(State.EAD);
        }


        private void ONE_MORE_INSN()
        {
            //UINT8 ireg;                             
            //pPPC = pPC;                             
            //debugger_instruction_hook(cpustate->device, PCD);                       
            //ireg=M_RDOP(PCD);                       
            State.PC++;
            //(*cpustate->insn[ireg])(cpustate);                  
            //increment_counter(cpustate, cpustate->cycles[ireg]);    
        }


        private int SIGNED(int b)
        {
            return ((int)((b & 0x80) == 0x80 ? b | 0xffffff00 : b));
        }

        private bool NXORV()
        {
            return ((State.CC & 0x08) ^ ((State.CC & 0x02) << 2)) == 0x08;
        }

        public int PULLBYTE()
        {
            State.S++;
            return ReadMem(State.S);
        }

        public int PULLWORD()
        {
            State.S++;
            int result = ReadMem(State.S) << 8;
            State.S++;
            result |= ReadMem(State.S);
            return result;
        }

        public void PUSHBYTE(int b)
        {
            WriteMem(State.S, b);
            --State.S;
        }

        public void PUSHWORD(int w)
        {
            WriteMem(State.S, w & 0xFF);
            --State.S;
            WriteMem(State.S, w >> 8);
            --State.S;
        }

        private void BRANCH(bool f)
        {
            var t = IMMBYTE();
            if (f)
            {
                State.PC += SIGNED(t);
            }
        }

        int[] cycles = new int[]
            {
            //0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
              0x05,0x02,0x05,0x05,0x05,0x05,0x02,0x02,0x04,0x04,0x02,0x02,0x02,0x02,0x02,0x02, // 0x00
              0x02,0x02,0x05,0x05,0x05,0x05,0x02,0x02,0x05,0x02,0x05,0x02,0x05,0x05,0x05,0x05, // 0x10
              0x04,0x05,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04, // 0x20
              0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x0A,0x05,0x05,0x09,0x0C, // 0x30
              0x02,0x05,0x05,0x02,0x02,0x05,0x02,0x02,0x02,0x02,0x02,0x05,0x02,0x02,0x05,0x02, // 0x40
              0x02,0x05,0x05,0x02,0x02,0x05,0x02,0x02,0x02,0x02,0x02,0x05,0x02,0x02,0x05,0x02, // 0x50
              0x07,0x05,0x05,0x07,0x07,0x05,0x07,0x07,0x07,0x07,0x07,0x05,0x07,0x07,0x04,0x07, // 0x60
              0x06,0x05,0x05,0x06,0x06,0x05,0x06,0x06,0x06,0x06,0x06,0x05,0x06,0x06,0x03,0x06, // 0x70
              0x02,0x02,0x02,0x05,0x02,0x02,0x02,0x05,0x02,0x02,0x02,0x02,0x03,0x08,0x03,0x05, // 0x80
              0x03,0x03,0x03,0x05,0x03,0x03,0x03,0x04,0x03,0x03,0x03,0x03,0x04,0x05,0x04,0x05, // 0x90
              0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x06,0x05,0x05,0x05,0x05,0x06,0x08,0x06,0x07, // 0xA0
              0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x04,0x05,0x09,0x05,0x06, // 0xB0
              0x02,0x02,0x02,0x05,0x02,0x02,0x02,0x05,0x02,0x02,0x02,0x02,0x05,0x05,0x03,0x05, // 0xC0
              0x03,0x03,0x03,0x05,0x03,0x03,0x03,0x04,0x03,0x03,0x03,0x03,0x05,0x05,0x04,0x05, // 0xD0
              0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x06,0x05,0x05,0x05,0x05,0x05,0x05,0x06,0x07, // 0xE0
              0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x06  // 0xF0
            };


        int[] flags8i = new int[]     /* increment */
          {
              0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x0a,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08
          };

        int[] flags8d = new int[]/* decrement */
          {
              0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
              0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08
          };

        private void SET_FLAGS8I(int a) { State.CC |= flags8i[(a) & 0xff]; }
        private void SET_FLAGS8D(int a) { State.CC |= flags8d[(a) & 0xff]; }

        int RM16(int Addr)
        {
            int result = ReadMem(Addr) << 8;
            return result | ReadMem((Addr + 1) & 0xffff);
        }

        void WM16(int Addr, int p)
        {
            WriteMem(Addr, p >> 8 & 0xff);
            WriteMem((Addr + 1) & 0xffff, p & 0xff);
        }

        private void CHECK_IRQ_LINES()
        {
            // TODO: IS3 interrupt

            //if (cpustate->nmi_pending)
            //{
            //    if(cpustate->wai_state & M6800_SLP)
            //        cpustate->wai_state &= ~M6800_SLP;

            //    cpustate->nmi_pending = FALSE;
            //    enter_interrupt(cpustate, "M6800 '%State.S' take NMI\n",0xfffc);
            //}
            //else
            //{
            //    if( cpustate->irq_state[M6800_IRQ_LINE] != CLEAR_LINE )
            //    {   /* standard IRQ */
            //        if(cpustate->wai_state & M6800_SLP)
            //            cpustate->wai_state &= ~M6800_SLP;

            //        if( !(State.CC & 0x10) )
            //        {
            //            enter_interrupt(cpustate, "M6800 '%State.S' take IRQ1\n",0xfff8);
            //            if( cpustate->irq_callback )
            //                (void)(*cpustate->irq_callback)(cpustate->device, M6800_IRQ_LINE);
            //        }
            //    }
            //    else
            //        if( !(State.CC & 0x10) )
            //            m6800_check_irq2(cpustate);
            //}
        }

        private int DIRWORD()
        {
            DIRECT();
            return RM16(State.EAD);
        }

        private void DIRECT()
        {
            State.EAD = IMMBYTE();
        }

        private void EXTENDED() { State.EAD = IMMWORD(); }

        private void INDEXED() { State.EAD = State.X + ReadMem(State.PC); State.PC++; }

        private int IMMWORD()
        {
            var result = (ReadMem(State.PC) << 8) | ReadMem((State.PC + 1) & 0xffff);
            State.PC += 2;
            return result;
        }

        private int IDXBYTE() { INDEXED(); return ReadMem(State.EAD); }
        private int IDXWORD() { INDEXED(); return RM16(State.EAD); }

        private void SEC() { State.CC |= 0x01; }
        private void CLC() { State.CC &= 0xfe; }
        private void SEZ() { State.CC |= 0x04; }
        private void CLZ() { State.CC &= 0xfb; }
        private void SEN() { State.CC |= 0x08; }
        private void CLN() { State.CC &= 0xf7; }
        private void SEV() { State.CC |= 0x02; }
        private void CLV() { State.CC &= 0xfd; }
        private void SEH() { State.CC |= 0x20; }
        private void CLH() { State.CC &= 0xdf; }
        private void SEI() { State.CC |= 0x10; }
        private void CLI() { State.CC &= ~0x10; }
        private void CLR_HNZVC() { State.CC &= 0xd0; }
        private void CLR_NZV() { State.CC &= 0xf1; }
        private void CLR_HNZC() { State.CC &= 0xd2; }
        private void CLR_NZVC() { State.CC &= 0xf0; }
        private void CLR_Z() { State.CC &= 0xfb; }
        private void CLR_NZC() { State.CC &= 0xf2; }
        private void CLR_ZC() { State.CC &= 0xfa; }
        private void CLR_C() { State.CC &= 0xfe; }

        /* macros for State.CC -- State.CC bits affected should be reset before calling */
        private void SET_Z(int a) { if ((a & 0xff) == 0)SEZ(); }
        private void SET_Z8(int a) { SET_Z(a); }
        private void SET_Z16(int a) { SET_Z(a); }
        private void SET_N8(int a) { State.CC |= (((a) & 0x80) >> 4); }
        private void SET_N16(int a) { State.CC |= (((a) & 0x8000) >> 12); }
        private void SET_H(int a, int b, int r) { State.CC |= ((((a) ^ (b) ^ (r)) & 0x10) << 1); }
        private void SET_C8(int a) { State.CC |= (((a) & 0x100) >> 8); }
        private void SET_C16(int a) { State.CC |= (((a) & 0x10000) >> 16); }
        private void SET_V8(int a, int b, int r) { State.CC |= ((((a) ^ (b) ^ (r) ^ ((r) >> 1)) & 0x80) >> 6); }
        private void SET_V16(int a, int b, int r) { State.CC |= ((((a) ^ (b) ^ (r) ^ ((r) >> 1)) & 0x8000) >> 14); }

        private void SET_NZ8(int a) { SET_N8(a); SET_Z8(a); }
        private void SET_NZ16(int a) { SET_N16(a); SET_Z16(a); }
        private void SET_FLAGS8(int a, int b, int r) { SET_N8(r); SET_Z8(r); SET_V8(a, b, r); SET_C8(r); }
        private void SET_FLAGS16(int a, int b, int r) { SET_N16(r); SET_Z16(r); SET_V16(a, b, r); SET_C16(r); }

        private int ADD8(int a, int b)
        {
            return (a + b) & 0xff;
        }

        private int SUB8(int a, int b)
        {
            return (a - b) & 0xff;
        }

        private int INC8(int a)
        {
            return ++a & 0xff;
        }

        private int DEC8(int a)
        {
            return --a & 0xff;
        }

        private int INC18(int a)
        {
            return ++a & 0xffff;
        }

        private int DEC16(int a)
        {
            return --a & 0xffff;
        }
    }
}
